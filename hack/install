#!/usr/bin/env bash

gomi_bin_dir=${PREFIX:-~/bin}
gomi_version=${VERSION:-latest}
gomi_tmp_dir=${TMPDIR:-/tmp}/gomi-${gomi_version}

main() {
  local arch
  local tarball
  local installation_method

  if [[ -x ${gomi_bin_dir}/gomi ]]; then
    echo "gomi is already installed at: ${gomi_bin_dir}/gomi"
    return 0
  fi

  arch="$(uname -sm)"
  case "${arch}" in
    "Darwin arm64")   tarball="gomi_Darwin_arm64.tar.gz"  ;;
    "Darwin x86_64")  tarball="gomi_Darwin_x86_64.tar.gz" ;;
    "Linux aarch64")  tarball="gomi_Linux_arm64.tar.gz"   ;;
    "Linux "*64)      tarball="gomi_Linux_x86_64.tar.gz"  ;;
    *)                tarball=""                          ;;
  esac

  # Try to get precompiled binaries
  if [[ -n "${tarball}" ]]; then
    if download "${tarball}"; then
      install -v -m 0755 "${gomi_tmp_dir}/gomi" "${gomi_bin_dir}/gomi"
      installation_method="binary"
    fi
  fi

  # Try to build from source code if failed to get binaries
  if [[ -z "${installation_method}" ]]; then
    if command -v go >/dev/null; then
      echo "No precompiled binary found for your system. Attempting to build from source..."
      if try_go; then
        installation_method="source"
      else
        echo "Unable to install gomi. Please visit https://gomi.dev for manual installation instructions." >&2
        return 1
      fi
    else
      echo "No installation method available. Please visit https://gomi.dev for installation guidance." >&2
      return 1
    fi
  fi

  echo "================================="
  bash -c "${gomi_bin_dir}/gomi --version"
  echo "================================="

  echo 'Done.'
}

try_curl() {
  local file=${1}
  command -v curl > /dev/null &&
  if [[ ${file} =~ tar.gz$ ]]; then
    curl --progress-bar -fL "${file}" | tar -xzf - -C "${gomi_tmp_dir}"
  else
    local tmp=${gomi_tmp_dir}/gomi.zip
    curl --progress-bar -fLo "${tmp}" "${file}" && unzip -o "${tmp}" -d "${gomi_tmp_dir}" && rm -f "${tmp}"
  fi
}

try_wget() {
  local file=${1}
  command -v wget > /dev/null &&
  if [[ ${file} =~ tar.gz$ ]]; then
    wget -O - "${file}" | tar -xzf - -C "${gomi_tmp_dir}"
  else
    local tmp=${gomi_tmp_dir}/gomi.zip
    wget -O "${tmp}" "${file}" && unzip -o "${tmp}" -d "${gomi_tmp_dir}" && rm -f "${tmp}"
  fi
}

download() {
  local tarball="${1}"
  local url

  if [[ -z ${tarball} ]]; then
    return 1
  fi

  mkdir -p "${gomi_bin_dir}" "${gomi_tmp_dir}" || {
    echo "Could not create temporary directories" >&2
    return 1
  }

  if [[ ${gomi_version} == latest ]]; then
    url="https://github.com/babarot/gomi/releases/latest/download/${tarball}"
  else
    url="https://github.com/babarot/gomi/releases/download/${gomi_version}/${tarball}"
  fi

  echo "Downloading gomi..."
  try_curl "${url}" || try_wget "${url}" || {
    echo "Failed to download binary using curl or wget" >&2
    return 1
  }

  if [[ ! -f ${gomi_tmp_dir}/gomi ]]; then
    echo "Download failed for ${tarball}" >&2
    return 1
  fi

  return 0
}

try_go() {
  local tmp_dir
  tmp_dir="$(mktemp -d)"
  trap 'rm -rf "${tmp_dir}"' EXIT

  git clone https://github.com/babarot/gomi "${tmp_dir}"
  (
    cd "${tmp_dir}" &&
    if make install; then
      echo "Build completed successfully"
      return 0
    else
      echo "Source code build failed" >&2
      return 1
    fi
  )

  return 0
}

main "${@}"
